package com.wisdom.im.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wisdom.im.model.bean.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, Void> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Username = new Property(0, String.class, "username", false, "USERNAME");
        public final static Property FirstLatter = new Property(1, String.class, "firstLatter", false, "FIRST_LATTER");
        public final static Property NeedShowFirstLatter = new Property(2, boolean.class, "needShowFirstLatter", false, "NEED_SHOW_FIRST_LATTER");
    };


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"USERNAME\" TEXT," + // 0: username
                "\"FIRST_LATTER\" TEXT," + // 1: firstLatter
                "\"NEED_SHOW_FIRST_LATTER\" INTEGER NOT NULL );"); // 2: needShowFirstLatter
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(1, username);
        }
 
        String firstLatter = entity.getFirstLatter();
        if (firstLatter != null) {
            stmt.bindString(2, firstLatter);
        }
        stmt.bindLong(3, entity.getNeedShowFirstLatter() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(1, username);
        }
 
        String firstLatter = entity.getFirstLatter();
        if (firstLatter != null) {
            stmt.bindString(2, firstLatter);
        }
        stmt.bindLong(3, entity.getNeedShowFirstLatter() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // username
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // firstLatter
            cursor.getShort(offset + 2) != 0 // needShowFirstLatter
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setUsername(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFirstLatter(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNeedShowFirstLatter(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Contact entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Contact entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
